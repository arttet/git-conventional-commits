name: release

on:
  push:
    tags:
      - 'v*'

env:
  BIN_NAME: git-conventional-commits
  PROJECT_NAME: git-conventional-commits

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages and GitHub Release
permissions:
  contents: write
  id-token: write
  packages: write
  pages: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  gh-pages:
    name: Generate GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Pages
        uses: actions/configure-pages@v2

      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: 'latest'

      - name: Build mdBook
        run: mdbook build docs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './docs/book'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  dist:
    name: Dist ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            build: x86_64-linux
            os: ubuntu-latest
            toolchain: stable
            cross: false

          - target: aarch64-unknown-linux-musl
            build: aarch64-linux
            os: ubuntu-latest
            toolchain: stable
            cross: true

          - target: x86_64-apple-darwin
            build: x86_64-macos
            os: macos-latest
            toolchain: stable
            cross: false

          - target: aarch64-apple-darwin
            build: aarch64-macos
            os: macos-latest
            toolchain: stable
            cross: false

          - target: x86_64-pc-windows-msvc
            build: x86_64-windows
            os: windows-latest
            toolchain: stable
            cross: false
    env:
      CARGO_PROFILE_RELEASE_LTO: true
      CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: test
          args: --release --locked --target ${{ matrix.target }} --no-run

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [dist]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Set the release body
        shell: bash
        run: |
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$(cat ${{ steps.git-cliff.outputs.changelog }})" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set the release name
        id: release-name
        shell: bash
        run: echo "release-name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Check Prerelease
        id: check-prerelease
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "prerelease=false" >> $GITHUB_OUTPUT
          else
              echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Build archive
        shell: bash
        run: |
          set -ex
          rm -rf tmp
          mkdir tmp
          mkdir dist
          for dir in bins-* ; do
              platform=${dir#"bins-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$platform
              mkdir tmp/$pkgname

              # cp LICENSE README.md tmp/$pkgname
              cp bins-$platform/$BIN_NAME$exe dist/$pkgname$exe
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname

              chmod +x tmp/$pkgname/$BIN_NAME$exe
              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done

      - name: Upload artifacts to release
        uses: svenstaro/upload-release-action@v2
        with:
          release_name: ${{ steps.release-name.outputs.release-name }}
          file: dist/*
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          prerelease: ${{ steps.check-prerelease.outputs.prerelease }}
          file_glob: true
          body: ${{ env.RELEASE_BODY }}

  package:
    name: Package
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      COMMIT_HASH: ${{ github.sha }}
    environment: production

    steps:
      - name: Set the version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION:1}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - uses: docker/build-push-action@v3
        with:
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
            COMMIT_HASH=${{ env.COMMIT_HASH }}
          file: Dockerfile
          tags: |
            ghcr.io/${{ github.repository_owner }}/git-conventional-commits:latest
            ghcr.io/${{ github.repository_owner }}/git-conventional-commits:${{ env.VERSION }}
